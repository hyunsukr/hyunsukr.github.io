DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("Female","Male"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
sclae_colour_manual()
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual()
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual(colorRampPalette("M"="blue"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual(colorRampPalette(c("M"="blue")))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual("sex", values=c("M"="blue"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual("sex", values=c("M"="blue","F"="orange"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male"))
scale_colour_manual("sex", values=c("M"="blue","F"="orange"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual("sex", values=c("M"="blue","F"="orange"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(limits=c("M","F"), labels=c("F"="Female","M"="Male")) +
scale_colour_manual("sex", values=c("M"="blue","F"="orange"))
DavisScatter2 + labs(title="Weights of individuals who regularly exercise",
x="Measured weight", y="Reported weight") +
labs(colour="Gender") +
scale_colour_discrete(labels=c("Female","Male"))
DavisScatter3 + theme(strip.background=element_rect(fill="darkgreen"),
strip.text.x=element_text(size=14, colour="white"))
dist1 + stat_function(fun=dnorm)
dist1 <- ggplot(Xdata1, aes(x=X))
dist1 + stat_function(fun=dnorm)
## Plotting a normal distribution curve
Xdata1 <- data.frame(X=c(-4,4))
dist1 <- ggplot(Xdata1, aes(x=X))
dist1 + stat_function(fun=dnorm)
## Plotting a normal distribution curve
Xdata1 <- data.frame(X=c(-4,4))
dist1 <- ggplot(Xdata1, aes(x=X))
dist1 + stat_function(fun=dnorm)
## Plotting a normal distribution and t-distribution curve
dist1 + stat_function(fun=dnorm) +
stat_function(fun=dt, args=list(df=3), linetype="dashed")
help("facet_wrap") + stat_function(fun=dnorm)
library(ggplot2)
library(car)
library(gcookbook)
library(MASS)
library(Hmisc)
## Adjusting transparency of data points
## Transparancy ranges between 0 to 1
DavisPlot + geom_point(alpha=0.2)
ggplot(mpg, aes(x=trans, y=hwy, fill=drv)) + stat_summary(fun.y=mean, position="dodge", geom="bar", width=0.8) + stat_summary(fun.y=mean, geom="text", vjust=0.8, aes(label=..y..),position=position_dodge(0.01))
ggplot(mpg, aes(x=trans, y=hwy)) + stat_summary(fun.y=mean, geom="bar", width=0.5) + stat_summary(fun.y=mean, geom="text", vjust=0.8, aes(label=..y..), width=0.5, position=position_dodge(0.5))
midwest[1:5,]
bar3 <- ggplot(midwest, aes(x=state, fill=as.factor(inmetro))) + geom_bar(position="dodge")
bar3 <- ggplot(midwest, aes(x=state, fill=as.factor(inmetro))) + geom_bar(position="dodge")
bar3
bar3 <- ggplot(midwest, aes(x=state, fill=category)) + geom_bar()
bar3
## Look at birthwt data (in MASS package)
birthwt[1:5,]
## Label race values in data
bwdata <- birthwt
bwdata
bwdata$race <- factor(bwdata$race, labels=c("white","black","other"))
bwdata[1:4,]
birthwt[1:4,]
## Create boxplots for birth weights separated by mother's race
bxplot <- ggplot(bwdata, aes(x=race, y=bwt))
bxplot + geom_boxplot() + geom_point(shape=4, aes(colour=race))
help(aes)
bxplot + geom_boxplot() + geom_jitter(shape=4, aes(colour=race))
## Jitter makes it spread out ( no covering it up )
## they get a random horizatal position
bxplot + geom_boxplot() + geom_dotplot(binaxis = "y", stackdir="center", aes(colour=race, fill=race))
ggplot(bwdata, aes(x=race, y=bwt, color=race, fill=race)) + geom_boxplot() + geom_dotplot(binaxis = "y")
mpg
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot()
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot() + geom_point(shape=22, aes(color=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_point(shape=21, aes(color=drv, fill=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_jitter(shape=21, aes(color=drv, fill=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_dotplot(shape=21, stackdir="center", aes(color=drv, fill=drv), binaxis="y")
## Plot the boxplot for one population
ggplot(bwdata, aes(x="other", y=bwt))  + geom_boxplot()
## Modify the space between the boxplots
bxplot + geom_boxplot()
bxplot + geom_boxplot(width=0.5)
## Modifing outlier aesthetics
bxplot + geom_boxplot(outlier.size=5, outlier.shape=21)
## Adding notches to boxplots
bxplot + geom_boxplot(notch=TRUE)
## Adding markers for the means
bxplot + geom_boxplot() + stat_summary(fun.y="mean", geom="point")
bxplot + geom_boxplot() +
stat_summary(fun.y="mean", geom="point", shape=21, size=3)
ggplot(mpg, aes(x=drv, y=hwy))+ geom_boxplot()+ stat_summary(fun.y=mean, geom="point", size=3, shape=4)
## Look at the faithful data
faithful[1:5,]
## Create histogram of waiting times
hist1 <- ggplot(faithful, aes(x=waiting))
hist1 + geom_histogram()
## Change number of bins in a histogram
binsize <- diff(range(faithful$waiting))/8
hist1 + geom_histogram(binwidth=binsize, fill="white", colour="black")
hist1 + geom_histogram(binwidth=5, fill="white", colour="black")
#  Additional example:                                                  #
#  Create a histogram with 4 bins using the mpg data for highway        #
#  mileage.                                                             #
binsize = diff(range(mpg$hwy))/4
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth=binsize,fill="white", colour="black")
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth=4,fill="white", colour="black")
## Look at the birthwt data (in MASS package)
birthwt[1:5,]
## Change labels for smoking and nonsmoking mothers
bwdata <- birthwt
bwdata$smoke <- factor(bwdata$smoke, labels=c("Nonsmoking","Smoking"))
## Create histograms for birth weights separated by mothers' smoking habits
hist2 <- ggplot(bwdata, aes(x=bwt))
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(smoke~.) #smoking on right side
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(.~smoke) #top label is smoking
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_grid(.~drv)
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_wrap(.~drv, nrow=2)
help("facet_wrap") + stat_function(fun=dnorm)
## Overlapping histograms
ggplot(bwdata, aes(x=bwt, fill=smoke)) +
geom_histogram(binwidth=250, position="identity", alpha=0.4)
## Determining the probability density function
dnorm(0)
dbinom(5, size=10, prob=0.3)
dpois(3, lambda=2.5)
## Determining the cumulative probability
pnorm(1.96)
help(pnorm)
## mean = 0, sd = 1
pnorm(4.5, mean=2, sd=1.6)
pt(2.0, df=6)
punif(0.7)
punif(5, min=3, max=8)
pf(17, df1=3, df2=25)
pchisq(7, df=3)
pbinom(5, size=10, prob=0.3)
ppois(3, lambda=2.5)
## Determining the value corresponding to the cumulative probability
qnorm(0.025)
qnorm(0.7, mean=2, sd=1.6)
qt(0.95, df=12)
qunif(0.35, min=3, max=8)
qf(0.975, df1=3, df2=25)
qchisq(0.99, df=3)
qbinom(0.9, size=10, prob=0.3)
qpois(0.7, lambda=2.5)
## Generating random numbers
rnorm(10)
rnorm(10, mean=2, sd=1.6)
rt(10, df=12)
runif(10)
runif(10, min=3, max=8)
rf(10, df1=3, df2=25)
rchisq(10, df=3)
rbinom(10, size=10, prob=0.3) #pick a value from data since its not a continuous
rpois(10, lambda=2.5) ##pick a value from data since its not a continuous
## Plotting a normal distribution curve
Xdata1 <- data.frame(X=c(-4,4))
dist1 <- ggplot(Xdata1, aes(x=X))
dist1 + stat_function(fun=dnorm)
## Plotting a normal distribution and t-distribution curve
dist1 + stat_function(fun=dnorm) +
stat_function(fun=dt, args=list(df=3), linetype="dashed")
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_grid(.~drv)
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_grid(.~drv) + stat_function(fun=dnorm)
knitr::opts_chunk$set(echo = TRUE, highlight=FALSE)
histvirginia <- ggplot(fatalaccva, aes(x=Person.count)) + geom_histogram(binwidth = 1, fill="white", colour="black", aes(y=..density..)) + stat_function(fun=dchisq, args=list(df=2)) + stat_function(fun=dnorm)
fatalacc <- read.csv("fatal accidents.csv")
bystate <- table(fatalacc$State)
fatalstate <- as.data.frame(bystate)
barbystate <- ggplot(fatalstate, aes(x=Var1, y=Freq)) + geom_bar(stat="identity", fill="white", colour="black")
print(barbystate + labs(title="Fatal accidents by state",
x="States", y="Fatal Accidents"))
bxperson <- ggplot(fatalacc, aes(x=State, y=Person.count))
mean_out_bx <- bxperson + geom_boxplot(width=0.5, outlier.size=2, outlier.shape=16, outlier.colour = "red") + stat_summary(fun.y="mean", geom="point", shape=16, size=2, color="blue")
print(mean_out_bx)
barmedian <- ggplot(fatalacc, aes(x=State, y=Person.count)) + stat_summary(fun.y=median, geom="bar", position="dodge",fill="white", colour="black")
barmedianer <- barmedian+ stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2)
print(barmedianer)
fatalaccva <- fatalacc[which(fatalacc$State == "Virginia"),]
density <- dnorm(x, mean(fatalaccva$Person.count),sd(fatalaccva$Person.count))
x=seq(0,15,5)
density <- dnorm(x, mean(fatalaccva$Person.count),sd(fatalaccva$Person.count))
histvirginia <- ggplot(fatalaccva, aes(x=Person.count)) + geom_histogram(binwidth = 1, fill="white", colour="black", aes(y=..density..)) + stat_function(fun=dchisq, args=list(df=2)) + stat_function(fun=dnorm)
print(histvirginia)
print(histvirginia)
density
## Create histograms for birth weights separated by mothers' smoking habits
hist2 <- ggplot(bwdata, aes(x=bwt))
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(smoke~.) #smoking on right side
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(.~smoke) #top label is smoking
bar3 + stat_summary(fun.y=mean, geom="bar", position=position_dodge(0.7), width=0.5)
## Look at cabbages data set (in MASS package)
cabbages[1:5,]
## Create bar graph for average weight, separated by cultivation
bar3 <- ggplot(cabbages, aes(x=Date, y=HeadWt, fill=Cult))
bar3 + stat_summary(fun.y=mean, geom="bar")
## Create bar graph for average weight, separated by cultivation
## Put bars next to each other
## Position = 'dodge'
## without this it hides the data
bar3 + stat_summary(fun.y=mean, geom="bar", position="dodge")
## Adjusting width
bar3 + stat_summary(fun.y=mean, geom="bar", position="dodge", width=0.5)
bar3 + stat_summary(fun.y=mean, geom="bar", position=position_dodge(0.7), width=0.5)
## Adjusting width
bar3 + stat_summary(fun.y=mean, geom="bar", position="dodge", width=0.5)
bar3 + stat_summary(fun.y=mean, geom="bar", position=position_dodge(0.7), width=0.5)
## Adding space between bars within groups
## position = position_dodge(0-1)
bar3 + stat_summary(fun.y=mean, geom="bar", position=position_dodge(1),
width=0.5)
ggplot(mpg, aes(x=trans, y=hwy, fill=drv)) + stat_summary(fun.y=mean, geom="bar", position=position_dodge(0.7),width=0.5) + stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.5)
ggplot(mpg, aes(x=trans, y=hwy, fill=drv)) + stat_summary(fun.y=mean, geom="bar", position=position_dodge(0.7),width=0.5) + stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.5)
## Look at birthwt data (in MASS package)
birthwt[1:5,]
## Label race values in data
bwdata <- birthwt
bwdata
bwdata$race <- factor(bwdata$race, labels=c("white","black","other"))
bwdata[1:4,]
birthwt[1:4,]
## Create boxplots for birth weights separated by mother's race
bxplot <- ggplot(bwdata, aes(x=race, y=bwt))
bxplot + geom_boxplot() + geom_point(shape=4, aes(colour=race))
bxplot + geom_boxplot() + geom_jitter(shape=4, aes(colour=race))
ggplot(bwdata, aes(x=race, y=bwt, color=race, fill=race)) + geom_boxplot() + geom_dotplot(binaxis = "y")
## Jitter makes it spread out ( no covering it up )
## they get a random horizatal position
bxplot + geom_boxplot() + geom_dotplot(binaxis = "y", stackdir="center", aes(colour=race, fill=race))
## Plot the boxplot for one population
ggplot(bwdata, aes(x="other", y=bwt))  + geom_boxplot()
## Create histogram of waiting times
hist1 <- ggplot(faithful, aes(x=waiting))
hist1 + geom_histogram()
## Modify the space between the boxplots
bxplot + geom_boxplot()
bxplot + geom_boxplot(width=0.5)
## Modifing outlier aesthetics
bxplot + geom_boxplot(outlier.size=5, outlier.shape=21)
## Adding notches to boxplots
bxplot + geom_boxplot(notch=TRUE)
## Adding markers for the means
bxplot + geom_boxplot() + stat_summary(fun.y="mean", geom="point")
bxplot + geom_boxplot() +
stat_summary(fun.y="mean", geom="point", shape=21, size=3)
ggplot(mpg, aes(x=drv, y=hwy))+ geom_boxplot()+ stat_summary(fun.y=mean, geom="point", size=3, shape=4)
## Look at the faithful data
faithful[1:5,]
## Create histogram of waiting times
hist1 <- ggplot(faithful, aes(x=waiting))
hist1 + geom_histogram()
## Change number of bins in a histogram
binsize <- diff(range(faithful$waiting))/8
hist1 + geom_histogram(binwidth=binsize, fill="white", colour="black")
hist1 + geom_histogram(binwidth=5, fill="white", colour="black")
#  Additional example:                                                  #
#  Create a histogram with 4 bins using the mpg data for highway        #
#  mileage.                                                             #
binsize = diff(range(mpg$hwy))/4
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth=binsize,fill="white", colour="black")
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth=4,fill="white", colour="black")
bwdata$smoke <- factor(bwdata$smoke, labels=c("Nonsmoking","Smoking"))
## Create histograms for birth weights separated by mothers' smoking habits
hist2 <- ggplot(bwdata, aes(x=bwt))
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(smoke~.) #smoking on right side
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(.~smoke) #top label is smoking
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_grid(.~drv) + stat_function(fun=dnorm)
ggplot(mpg, aes(x=hwy)) + geom_histogram(binwidth = 4, fill="white", color="black") + facet_wrap(.~drv, nrow=2)
help("facet_wrap") + stat_function(fun=dnorm)
## Overlapping histograms
ggplot(bwdata, aes(x=bwt, fill=smoke)) +
geom_histogram(binwidth=250, position="identity", alpha=0.4)
## Create a QQ plot for the waiting times
ggplot(faithful, aes(sample = waiting)) + stat_qq()
## Calculate the equation of the reference line
y <- quantile(faithful$waiting, c(0.25, 0.75))
x <- qnorm( c(0.25, 0.75))
slope <- diff(y)/diff(x)
bxplot + geom_boxplot() + geom_point(shape=4, aes(colour=race))
bwdata$race <- factor(bwdata$race, labels=c("white","black","other"))
bwdata[1:4,]
birthwt[1:4,]
## Create boxplots for birth weights separated by mother's race
bxplot <- ggplot(bwdata, aes(x=race, y=bwt))
bxplot + geom_boxplot() + geom_point(shape=4, aes(colour=race))
help(aes)
bxplot + geom_boxplot() + geom_jitter(shape=4, aes(colour=race))
## Jitter makes it spread out ( no covering it up )
## they get a random horizatal position
bxplot + geom_boxplot() + geom_dotplot(binaxis = "y", stackdir="center", aes(colour=race, fill=race))
ggplot(bwdata, aes(x=race, y=bwt, color=race, fill=race)) + geom_boxplot() + geom_dotplot(binaxis = "y")
## Jitter makes it spread out ( no covering it up )
## they get a random horizatal position
bxplot + geom_boxplot() + geom_dotplot(binaxis = "y", stackdir="center", aes(colour=race, fill=race))
ggplot(bwdata, aes(x=race, y=bwt, color=race, fill=race)) + geom_boxplot() + geom_dotplot(binaxis = "y")
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot()
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot() + geom_point(shape=22, aes(color=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_point(shape=21, aes(color=drv, fill=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_jitter(shape=21, aes(color=drv, fill=drv))
ggplot(mpg, aes(x=drv, y=hwy)) + geom_boxplot(outlier.shape = 4) + geom_dotplot(shape=21, stackdir="center", aes(color=drv, fill=drv), binaxis="y")
## Plot the boxplot for one population
ggplot(bwdata, aes(x="other", y=bwt))  + geom_boxplot()
## Modify the space between the boxplots
bxplot + geom_boxplot()
bxplot + geom_boxplot(width=0.5)
bxplot + geom_boxplot(width=0.5)
## Plotting a normal distribution curve
Xdata1 <- data.frame(X=c(-4,4))
dist1 <- ggplot(Xdata1, aes(x=X))
dist1 + stat_function(fun=dnorm)
## Plotting a normal distribution and t-distribution curve
dist1 + stat_function(fun=dnorm) +
stat_function(fun=dt, args=list(df=3), linetype="dashed")
dist2 <- ggplot(Xdata2, aes(x=X))
dist2 + stat_function(fun=dchisq, args=list(df=4))
## Create histograms for birth weights separated by mothers' smoking habits
hist2 <- ggplot(bwdata, aes(x=bwt))
hist2 + geom_histogram(binwidth=250, fill="white", colour="black") +
facet_grid(smoke~.) #smoking on right side
## Adding error bars to the bar graph (CI)
## mean_cl_normal = CI
## Shud i add CI without checking the data. If we dont know pop std then we use t.
## Assumption for t confidence interval is that we have normal data
## we can ignore this if we have alot of data
## however we do not have big data
## adding these ci may not be statistically right.
bar2 + stat_summary(fun.y=mean, geom="bar", fill="white", colour="black", width=0.5) +
stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2)
bar3 + stat_summary(fun.y=mean, geom="bar")
for(i in 1:5) i
for(i in 1:5) print(i)
j <- 10
for(i in 1:5){
print(j)
j <- j+1
}
j <- 10
j <- 10
for(i in 1:5){
print(j)
j <- j+1
}
j <- 10
j <- 10
for(i in 1:5){
print(j)
j <- j+1
}
j <- 10
for(i in 1:5){
j <- j+1
print(j)
}
j <- 10
new_vect <- NULL
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
j <- 10
new_vect <- NULL
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
j <- 10
new_vect <- NULL
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
j <- 10
new_vect <- NULL
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
new_vect
j <- 10
new_vect <- rep(0,5)
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
new_vect
library(car)
library(ggplot2)
j <- 10
new_vect <- rep(0,5)
for(i in 1:5){
new_vect[i] <- j
j <- j+1
}
new_vect
A <- matrix(1:6, nrow=2, ncol=3, byrow=T)
new_vect <- NULL
k<-1
for(i in 1:3){
for(j in 1:2){
new_vect[k]<-A[j,i]
k<-k+1
}
}
new_vect
new_vect <- rep(0,5)
for(i in 1:5){
j <- j+1
if(j==13){next}
new_vect[i] <- j
}
new_vect
j<-10
while(j<20){
j <- j+1
print(j)
if(j==14){break}
}
## example ##
vocab
library(car)
library(ggplot2)
vocab
vocab[1:5,]
Vocab[1:5,]
while( Vocab$year == 2004) {
print(Vocab$year)
}
while( Vocab$year == 2004) {
print("HI")
}
ifelse(Vocab$year==2004,print(hi),print("no"))
ifelse(Vocab$year==2004,print("hi"),print("no"))
Vocab[1:5,]
ifelse(Vocab$year==2004,print("hi"),print("no"))
ifelse(Vocab$year==2004,print("hi"),print("no"))
yrs <-sort(unique(Vocab$year))
yrs
avg_mat <- matrix(nrow16, ncol=3)
avg_mat <- matrix(nrow=16, ncol=3)
avg_mat
v_sub <- Vocat[Vocab$year==1974,]
v_sub <- Vocab[Vocab$year==1974,]
mean (v_sub$education)
mean(v_sub$vocabulary)
avg_mat <- matrix(nrow=16, ncol=3)
for(i in 1:16){
v_sub <- Vocab[Vocab$year==yrs[i],]
avg_mat[i,2] <- mean(v_sub$education)
avg_mat[i, 3] <- mean(v_sub$vocabulary)
avg_mat[i,1] <- yrs[i]
}
avg_mat
list1 <- list(1:7, c(2,7,9,12)^2, 1/(1:10))
list1
lapply(list1, sum)
sapply(list1, sum)
## tapply
tapply(Davis$weight, Davis$sex, mean)
tapply(Vocab$education, Vocab$vocabulary, mean)
tapply(Vocab$education, Vocab$vocabulary, mean)
tapply(Vocab$education, Vocab$vocabulary, mean, apply())
tapply(Vocab$education, Vocab$vocabulary, mean)
tapply(vocab$education, vocab$vocabulary, mean)
tapply(Vocab$education, Vocab$vocabulary, mean)
avg_mat
