class(numaccstate)
numaccstate[2]
numaccstate[2][1]
numaccstate[2][2]
length(numaccstate)
totalacc<-lapply(1:length(numaccstate), function(x) sum(numaccstate[x]))
totalacc
numaccstate[2,]
totalacc<-lapply(1:length(numaccstate), function(x) sum(numaccstate[2, ]))
totalacc
totalacc<-lapply(1:length(numaccstate), function(x) sum(numaccstate[x, ]))
numaccstate[1,]
class(numaccstate[1,])
class(sum(numaccstate[1,]))
class(sum(as.vector(numaccstate[1,])))
sum(as.vector(numaccstate[1,]))
totalacc<-lapply(1:length(numaccstate), function(x) sum(as.vector(numaccstate[x, ])))
sum(as.vector(numaccstate[1,]))
sum(as.vector(numaccstate[2,]))
totalacc<-lapply(1:length(numaccstate), function(x) sum(as.vector(numaccstate[x,])) )
totalacc<-lapply(1:5, function(x) sum(as.vector(numaccstate[x,])) )
totalacc
totalacc<-lapply(1:length(statenames), function(x) sum(as.vector(numaccstate[x,])) )
totalacc
print(ttotalacc)
totalacc<-lapply(1:length(statenames), function(x) sum(as.vector(numaccstate[x,])) )
print(totalacc)
totalacc
totalacc[1]
totalacc[[1]]
numaccstate/2
lapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
numaccstate <- table(crash$State,crash$Vehicle.count)
print(numaccstate)
as.data.frame.table(percent)
percent <- lapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
as.data.frame.table(percent)
percent <- lapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
percent
percent <- lapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
table(crash$State,percent)
percent
table(crash$State,crash$Vehicle.count)
class(percent)
as.data.frame(percent)
class(percent)
percent
percent <- lapply(1:length(statenames), function(x) table(numaccstate[x, ]/totalacc[[x]]))
class(percent)
percent
percent <- lapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
class(percent)
percent
percent[1]
percent[[1]]
percent <- sapply(1:length(statenames), function(x) numaccstate[x, ]/totalacc[[x]])
class(percent)
percent
numvhe <- lapply(1:length(statenames), function(x) as.data.frame(table(state.list[[x]]$Vehicle.count)))
addstate<-lapply(1:length(statenames), function(x) cbind(numvhe[[x]], State = statenames[x]))
vehicles_bystate <- lapply(addstate, setNames, nm = c("Number of vehicles involved", "Frequency", "State"))
print(vehicles_bystate)
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]]))
percent
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]]),1)
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]]),digit=1)
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]]),digit,1)
round?
?round
?round()
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]]),digits = 1)
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]],digits = 1))
percent
t(percent)
percent <- sapply(1:length(statenames), function(x) round(numaccstate[x, ]/totalacc[[x]],digits = 1))
percentage <- t(percent)
print(percentage)
names(car)
names(crash)
dayweek <- table(crash$State,crash$Day.of.week)
print(daywekk)
dayweek <- table(crash$State,crash$Day.of.week)
print(dayweek)
firstfew <- lapply(1:length(statenames), function(x) state.list[[x]][1:3,] )
print(firstfew)
dayweek <- table(crash$State,crash$Day.of.week)
print(dayweek)
print(table(percentage))
print(percentage)
class(percentage)
print(as.table(percentage))
class(as.table(percentage))
print(as.table(percentage))
row.names(as.table(percentage))
tablep <- as.table(percentage)
row.names(tablep)
row.names(tablep)
row.names(tablep) <- statenames
print(tablep)
numvehday <- lapply(1:length(statenames), function(x) crash[crash$State == statenames[x],])
numvehday
numvehday[1]
length(numvehday)
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[x]$Day.of.week,numvehday[x]$Vehicle.count) )
listtable
numvehday[1]$Day.of.week
numvehdayp[[1]$Day.of.week
numvehdayp[[1]]$Day.of.week
numvehday[[1]]$Day.of.week
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[[x]]$Day.of.week,numvehday[[x]]$Vehicle.count) )
listtable
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[[x]]$Day.of.week,numvehday[[x]]$Vehicle.count) )
listtable
numvehday <- lapply(1:length(statenames), function(x) crash[crash$State == statenames[x],])
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[[x]]$Day.of.week,numvehday[[x]]$Vehicle.count) )
listtable
print(listtable)
numvehday <- lapply(1:length(statenames), function(x) crash[crash$State == statenames[x],])
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[[x]]$Day.of.week,numvehday[[x]]$Vehicle.count) )
print(listtable)
set.seed(19981218)
sample(wtdata,10)
## First plot the chi-squared population distribution
Xdata2 <- data.frame(X=c(0,20))
dist2 <- ggplot(Xdata2, aes(x=X))
dist2 + stat_function(fun=dchisq, args=list(df=4))
## Determine the number of repeated samples to draw and parameter values
K <- 10000
rnorm
?rnorm
rnorm(25, mean, sd)
rnorm(25,mean= mean, sd=sd)
rnorm(25,mean= meanpop, sd=sdpop)
meanpop =62.9
sdpop = 13.3
rnorm(25,mean= meanpop, sd=sdpop)
class(samp)
samp <- rnorm(25,mean= meanpop, sd=sdpop)
class(samp)
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
class(samp)
samp[1]
print(samp)
z.test(samp)
?z.test
?z.test()
same.test
mean(samp)
sd(samp)
qnorm
?qnorm
mean(samp)
sd(samp)
qnorm(p, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
mean(samp)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) < upperbound)
lowerbound < mean(samp) < upperbound
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))
replicate(5, rnorm(10))
replicate(5, rnorm(10))
mean(replicate(5, rnorm(10)))
replicate(5, rnorm(10))[1]
replicate(5, rnorm(10))[2]
replicate(5, rnorm(10))[2,]
replicate(5, rnorm(10))[,1]
mean(replicate(5, rnorm(10))[,1])
trials <- replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))
class(trials)
trials[1]
trials[,1]
trials <- replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))
trials
replicate(5, rnorm(10))
eplicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))
replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))
replicate(5, rnorm(10))[,1]
replicate(5, rnorm(10))[,1]
replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))[,]
replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))[,1]
replicate(10,000, rnorm(25,mean= meanpop, sd=sdpop))[,1]
replicate(10, rnorm(25,mean= meanpop, sd=sdpop))[,1]
replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))[,1]
replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))[,1]
trials
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
trials
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))[,1]
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
trials[,1]
lapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
lapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
lapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
tapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
lpply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
which(vectreject == "TRUE")
which(vectreject == TRUE)
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
which(vectreject == TRUE)
which(vectreject == FALSE)
lowerbound2 <- qnorm(0.05, mean = mean(samp), sd = sd(samp), lower.tail = TRUE, log.p = FALSE)
upperbound2 <- qnorm(0.05, mean = mean(samp), sd = sd(samp), lower.tail = FALSE, log.p = FALSE)
lowerbound2 < meanpop & meanpop< upperbound2
lowerbound2 < meanpop & meanpop< upperbound2
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = TRUE, log.p = FALSE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = FALSE, log.p = FALSE))
which(vectreject2 == FALSE)
trials
trials[,1]
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = TRUE, log.p = FALSE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = FALSE, log.p = FALSE))
which(vectreject == FALSE)
which(vectreject2 == FALSE)
z.test(trials, y = NULL, alternative = "two.sided", mu = meanpop, sigma.x = sdpop,
sigma.y = NULL, conf.level = 0.95)
z.test(trials, y = NULL, alternative = "two.sided", mu = meanpop, sigma.x = sdpop, sigma.y = NULL, conf.level = 0.95)
prop.test(trials, y = NULL, alternative = "two.sided", mu = meanpop, sigma.x = sdpop, sigma.y = NULL, conf.level = 0.95)
prop.test(x= trials, y = NULL, alternative = "two.sided", mu = meanpop, sigma.x = sdpop, sigma.y = NULL, conf.level = 0.95)
z.test(x= trials, y = NULL, alternative = "two.sided", mu = meanpop, sigma.x = sdpop, sigma.y = NULL, conf.level = 0.95)
z.test(x= trials, alternative = "two.sided", mu = meanpop, sigma.x = sdpop)
help(z.test)
??z.test
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = TRUE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(mean(trials[,x])), lower.tail = FALSE))
which(vectreject == FALSE)
which(vectreject2 == FALSE)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = TRUE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = FALSE))
which(vectreject == FALSE)
which(vectreject2 == FALSE)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = TRUE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = FALSE))
which(vectreject2 == FALSE)
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = TRUE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = FALSE))
which(vectreject == FALSE)
which(vectreject2 == FALSE)
totalacc<-lapply(1:length(statenames), function(x) sum(as.vector(numaccstate[x,])) )
print(totalacc)
?ztest
?tes
?test
?sapply
## First plot the chi-squared population distribution
Xdata2 <- data.frame(X=c(0,20))
dist2 <- ggplot(Xdata2, aes(x=X))
dist2 + stat_function(fun=dchisq, args=list(df=4))
## Determine the number of repeated samples to draw and parameter values
K <- 10000
a <- 4
## Draw 10,000 samples of size 5 from the population distribution
samps <- replicate(K, rchisq(5,a))
samps[,1:10]
## Determine the sample mean from each random sample
means5 <- apply(samps,2,mean)
## Create a QQ plot of the resulting sample means
mean_data <- data.frame(X=means5)
y <- quantile(mean_data$X, c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope*x[1]
ggplot(mean_data, aes(sample = X)) + stat_qq() +
geom_abline(intercept=int, slope=slope) + labs(title="n=5")
trials[,]
trials[,1]
trials[1,]
trials[2,1]
trials[1,2]
for (i in c(10,15,30,40,50)){
samps <- replicate(K, rchisq(i,a))
means <- apply(samps,2,mean)
assign(paste("means",i,sep=""), means)
mean_data <- data.frame(X=means)
y <- quantile(mean_data$X, c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1] - slope*x[1]
qqmean <-ggplot(mean_data, aes(sample = X)) + stat_qq() +
geom_abline(intercept=int, slope=slope) + labs(title=paste("n=",i,sep=""))
print(qqmean)
}
which(vectreject == FALSE)
x<-1
lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound
mean(trials[,x])
trials[,x]
lowerbound < mean(trials[,x])
lowerbound
upperbound
sdpop = 13.3/(5)
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
which(vectreject == FALSE)
sdpop = 13.3/(5)
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
print(samp)
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
meanpop =62.9
sdpop = 13.3/(5)
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
print(samp)
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop/5))
print(samp)
meanpop =62.9
sdpop = 13.3
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop/5))
print(samp)
meanpop =62.9
sdpop = 13.3
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
print(samp)
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
vectreject2 <- sapply(1:10000, function(x) qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = TRUE) < meanpop && meanpop < qnorm(0.05, mean = mean(trials[,x]), sd = sd(trials[,x]), lower.tail = FALSE))
which(vectreject == FALSE)
which(vectreject == FALSE)
count(which(vectreject == FALSE))
which(vectreject == FALSE)
class(which(vectreject == FALSE))
class(as.vector(which(vectreject == FALSE)))
class(as.vector(which(vectreject == FALSE)))
as.vector(which(vectreject == FALSE))
re <- as.vector(which(vectreject == FALSE))
class(re)
class(length(re))
length(re)
length(re)/10000
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
numreject <- as.vector(which(vectreject == FALSE))
rejectprop <- length(numreject)/10000
print(rejectprop)
print(rejectprop)
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
numreject <- as.vector(which(vectreject == FALSE))
rejectprop <- length(numreject)/10000
print(rejectprop)
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
numreject <- as.vector(which(vectreject == FALSE))
rejectprop <- length(numreject)/10000
print(rejectprop)
meanpop =62.9
sdpop = 13.3
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
print(samp)
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
trials <- replicate(10000, rnorm(25,mean= meanpop, sd=sdpop))
vectreject <- sapply(1:10000, function(x) lowerbound < mean(trials[,x]) && mean(trials[,x]) < upperbound)
numreject <- as.vector(which(vectreject == FALSE))
rejectprop <- length(numreject)/10000
print(rejectprop)
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
lowerbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = TRUE, log.p = FALSE)
upperbound <- qnorm(0.05, mean = meanpop, sd = sdpop/5, lower.tail = FALSE, log.p = FALSE)
lowerbound < mean(samp) & mean(samp)< upperbound
s_mean <- mean(samp)
s_sd <- sd(samp)
cl <- 2*pnorm(abs((s_mean-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE)
print(cl<0.05)
rep_sample <- replicate(1:10000, function(x) rnorm(25, mean=pop.mean,sd =pop.sd))
rep_sample <- replicate(1:10000, function(x) rnorm(25, mean=meanpop,sd =sdpop))
rep_sample <- replicate(1:10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_sample <- replicate(1:10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
reg_sample
reg_sample[1]
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
reg_sample[1]
rep_sample[1]
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_sample[1]
rep_sample
rep_sample[,]
rep_sample[,1]
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_mean <- sapply(1:10000, function(x) mean(rep_sample[,x]))
rep_mean[1]
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_mean <- sapply(1:10000, function(x) mean(rep_sample[,x]))
rep_cl <- sapply(1:10000, function(x) 2*pnorm(abs((rep_mean[x]-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE))
rejects <- as.vector(which(rep_cl < 0.05))
length(rejects)/10000
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_mean <- sapply(1:10000, function(x) mean(rep_sample[,x]))
rep_cl <- sapply(1:10000, function(x) 2*pnorm(abs((rep_mean[x]-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE))
rejects <- as.vector(which(rep_cl < 0.1))
length(rejects)/10000
s_mean <- mean(samp)
s_sd <- sd(samp)
cl <- 2*pnorm(abs((s_mean-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE)
print(cl<0.1)
s_mean <- mean(samp)
s_sd <- sd(samp)
cl <- 2*pnorm(abs((s_mean-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE)
print(cl<0.1)
meanpop =62.9
sdpop = 13.3
samp <- as.vector(rnorm(25,mean= meanpop, sd=sdpop))
print(samp)
s_mean <- mean(samp)
s_sd <- sd(samp)
p_val <- 2*pnorm(abs((s_mean-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE)
print(p_val<0.1)
rep_sample <- replicate(10000, rnorm(25, mean=meanpop,sd =sdpop))
rep_mean <- sapply(1:10000, function(x) mean(rep_sample[,x]))
rep_p <- sapply(1:10000, function(x) 2*pnorm(abs((rep_mean[x]-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE))
rejects <- as.vector(which(rep_p < 0.1))
length(rejects)/10000
numvehday <- lapply(1:length(statenames), function(x) crash[crash$State == statenames[x],])
listtable <- lapply(1:length(numvehday), function(x) table(numvehday[[x]]$Day.of.week,numvehday[[x]]$Vehicle.count) )
print(listtable)
rep_sample <- replicate(10000,
rnorm(25,
mean=meanpop,
sd =sdpop))
rep_mean <- sapply(1:10000, function(x)
mean(rep_sample[,x]))
rep_p <- sapply(1:10000, function(x)
2*pnorm(abs((rep_mean[x]-meanpop)/(sdpop/sqrt(25))), lower.tail=FALSE))
rejects <- as.vector(which(rep_p < 0.1))
length(rejects)/10000
numvehday
print(listtable)
names(numvehday[[x]]$Day.of.week)
print(listtable)
row.names(listtable) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
print(listtable)
row.names(listtable) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
print(listtable)
proportion <- length(rejects)/10000
print(proportion)
